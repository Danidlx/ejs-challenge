# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cluster-hmg    # TODO: update to cluster name
  GKE_ZONE: us-east1-b   # TODO: update to cluster zone
  DEPLOYMENT_NAME: ejs-challenge # TODO: update to deployment name
  IMAGE: ejs-challenge
  NAMESPACE: default
  DB_HOST: mongo-mongodb
  REPOSITORY_URL: docker.pkg.github.com
  IMAGE_NAME: ${{ github.repository }}/alerta-cli
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-20.04
    environment: development

    steps:
    - name: Slack Notification
      uses: act10ns/slack@v1
      with:
        status: starting
        channel: '#devops'
      if: always()

    - name: Checkout
      id: git-checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      id: setup-cloud
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker
      id: configure-docker  

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      id: get-cluster-credentials
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Build
      id: docker-build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      id: docker-push
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

    # # Set up helm
    # - name: Set up Helm
    #   run: |-
    #     curl -LO https://get.helm.sh/helm-v3.5.2-linux-amd64.tar.gz
    #     tar -xvzf helm-v3.5.2-linux-amd64.tar.gz
    #     chmod ug+x linux-amd64/helm 
    
    # && mv linux-amd64/helm /bin/helm

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      id: deploy
      run: |-
        helm -n $NAMESPACE upgrade --install $DEPLOYMENT_NAME ./helm/$DEPLOYMENT_NAME --set image.repository=gcr.io/$PROJECT_ID/$IMAGE --set image.tag=$GITHUB_SHA --set envMap.DB_HOST=$DB_HOST
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide

    - uses: act10ns/slack@v1
      with:
        status: ${{ job.status }} 
        steps: ${{ toJson(steps) }}
        channel: '#devops'
      if: always()
      
    - run: |-
        export RANDOM_SENTENCE=$(shuf -i 1-24 -n 1)
        export SUCCESS=$(sed -n $RANDOM_SENTECEp .github/workflows/funny_quotes.txt)
        curl -X POST -H 'Content-type: application/json' --data '{"FunnyQuote":$SUCCESS }' $SLACK_WEBHOOK_URL
    

    # - uses: act10ns/slack@v1
    #   with:
    #     status: ${{ job.status }} 
    #     steps: ${{ toJson(steps) }}
    #     channel: '#devops'
    #   if: success()
    #   run: |-
    #     export RANDOM_SENTENCE=$(shuf -i 1-24 -n 1)
    #     export SUCCESS=$(sed -n $RANDOM_SENTECEp funny_quotes.txt)
    #     curl -X POST -H 'Content-type: application/json' --data '{"FunnyQuote":$SUCCESS }' $SLACK_WEBHOOK_URL